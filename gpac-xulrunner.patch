--- gpac/applications/osmozilla/npplat.h.orig	2005-07-13 16:34:30.000000000 +0200
+++ gpac/applications/osmozilla/npplat.h	2011-03-20 09:34:57.624712082 +0100
@@ -49,7 +49,7 @@
 #endif
 
 #include "npapi.h"
-#include "npupp.h"
+#include "npfunctions.h"
 
 /**************************************************/
 /*                                                */
--- gpac/applications/osmozilla/osmozilla.h.orig	2008-10-06 17:17:57.000000000 +0200
+++ gpac/applications/osmozilla/osmozilla.h	2011-03-20 10:04:41.876713758 +0100
@@ -39,6 +39,7 @@
 #define __PLUGIN_H__
 
 #include <nsIClassInfo.h>
+#include <nsIProgrammingLanguage.h>
 
 #include "npplat.h"
 #include "nsIOsmozilla.h"
@@ -104,7 +104,7 @@

 // global to get plugins name & description
 NPError NS_PluginGetValue(NPPVariable aVariable, void *aValue);
-char* NPP_GetMIMEDescription(void);
+const char* NPP_GetMIMEDescription(void);


 //#define NO_GPAC
--- gpac/applications/osmozilla/osmozilla.cpp.orig	2008-10-06 17:17:57.000000000 +0200
+++ gpac/applications/osmozilla/osmozilla.cpp	2011-03-20 10:12:46.068709568 +0100
@@ -856,19 +856,19 @@
 		return NS_ERROR_NULL_POINTER;
 
     if (aIID.Equals(kIZillaPluginIID)) {
-		*aInstancePtr = NS_STATIC_CAST(nsIOsmozilla *, this);
+		*aInstancePtr = static_cast<nsIOsmozilla *>(this);
 		AddRef();
 		return NS_OK;
     }
     
 	if (aIID.Equals(kIClassInfoIID)) {
-		*aInstancePtr = NS_STATIC_CAST(nsIClassInfo *, this);
+		*aInstancePtr = static_cast<nsIClassInfo *>(this);
 		AddRef();
 		return NS_OK;
     }
 
     if (aIID.Equals(kISupportsIID)) {
-		*aInstancePtr = NS_STATIC_CAST(nsISupports *, (NS_STATIC_CAST (nsIOsmozilla *, this)));
+		*aInstancePtr = static_cast<nsISupports *>((static_cast<nsIOsmozilla *>(this)));
 		AddRef();
 		return NS_OK;
     }
--- gpac/applications/osmozilla/npn_gate.cpp.orig	2005-07-13 16:34:29.000000000 +0200
+++ gpac/applications/osmozilla/npn_gate.cpp	2011-03-20 10:24:21.496702863 +0100
@@ -58,7 +58,7 @@
   NPError rv = NPERR_NO_ERROR;
 
   if( navMinorVers >= NPVERS_HAS_NOTIFICATION )
-		rv = CallNPN_GetURLNotifyProc(NPNFuncs.geturlnotify, instance, url, target, notifyData);
+		rv = (*NPNFuncs.geturlnotify)(instance, url, target, notifyData);
 	else
 		rv = NPERR_INCOMPATIBLE_VERSION_ERROR;
 
@@ -67,32 +67,32 @@
 
 NPError NPN_GetURL(NPP instance, const char *url, const char *target)
 {
-  NPError rv = CallNPN_GetURLProc(NPNFuncs.geturl, instance, url, target);
+  NPError rv = (*NPNFuncs.geturl)(instance, url, target);
   return rv;
 }
 
-NPError NPN_PostURLNotify(NPP instance, const char* url, const char* window, uint32 len, const char* buf, NPBool file, void* notifyData)
+NPError NPN_PostURLNotify(NPP instance, const char* url, const char* window, uint32_t len, const char* buf, NPBool file, void* notifyData)
 {
 	int navMinorVers = NPNFuncs.version & 0xFF;
   NPError rv = NPERR_NO_ERROR;
 
 	if( navMinorVers >= NPVERS_HAS_NOTIFICATION )
-		rv = CallNPN_PostURLNotifyProc(NPNFuncs.posturlnotify, instance, url, window, len, buf, file, notifyData);
+		rv = (*NPNFuncs.posturlnotify)(instance, url, window, len, buf, file, notifyData);
 	else
 		rv = NPERR_INCOMPATIBLE_VERSION_ERROR;
 
   return rv;
 }
 
-NPError NPN_PostURL(NPP instance, const char* url, const char* window, uint32 len, const char* buf, NPBool file)
+NPError NPN_PostURL(NPP instance, const char* url, const char* window, uint32_t len, const char* buf, NPBool file)
 {
-  NPError rv = CallNPN_PostURLProc(NPNFuncs.posturl, instance, url, window, len, buf, file);
+  NPError rv = (*NPNFuncs.posturl)(instance, url, window, len, buf, file);
   return rv;
 } 
 
 NPError NPN_RequestRead(NPStream* stream, NPByteRange* rangeList)
 {
-  NPError rv = CallNPN_RequestReadProc(NPNFuncs.requestread, stream, rangeList);
+  NPError rv = (*NPNFuncs.requestread)(stream, rangeList);
   return rv;
 }
 
@@ -103,20 +103,20 @@
   NPError rv = NPERR_NO_ERROR;
 
 	if( navMinorVersion >= NPVERS_HAS_STREAMOUTPUT )
-		rv = CallNPN_NewStreamProc(NPNFuncs.newstream, instance, type, target, stream);
+		rv = (*NPNFuncs.newstream)(instance, type, target, stream);
 	else
 		rv = NPERR_INCOMPATIBLE_VERSION_ERROR;
 
   return rv;
 }
 
-int32 NPN_Write(NPP instance, NPStream *stream, int32 len, void *buffer)
+int32_t NPN_Write(NPP instance, NPStream *stream, int32_t len, void *buffer)
 {
 	int navMinorVersion = NPNFuncs.version & 0xFF;
-  int32 rv = 0;
+  int32_t rv = 0;
 
   if( navMinorVersion >= NPVERS_HAS_STREAMOUTPUT )
-		rv = CallNPN_WriteProc(NPNFuncs.write, instance, stream, len, buffer);
+		rv = (*NPNFuncs.write)(instance, stream, len, buffer);
 	else
 		rv = -1;
 
@@ -129,7 +129,7 @@
   NPError rv = NPERR_NO_ERROR;
 
   if( navMinorVersion >= NPVERS_HAS_STREAMOUTPUT )
-		rv = CallNPN_DestroyStreamProc(NPNFuncs.destroystream, instance, stream, reason);
+		rv = (*NPNFuncs.destroystream)(instance, stream, reason);
 	else
 		rv = NPERR_INCOMPATIBLE_VERSION_ERROR;
 
@@ -138,78 +138,78 @@
 
 void NPN_Status(NPP instance, const char *message)
 {
-  CallNPN_StatusProc(NPNFuncs.status, instance, message);
+  (*NPNFuncs.status)(instance, message);
 }
 
 const char* NPN_UserAgent(NPP instance)
 {
   const char * rv = NULL;
-  rv = CallNPN_UserAgentProc(NPNFuncs.uagent, instance);
+  rv = (*NPNFuncs.uagent)(instance);
   return rv;
 }
 
-void* NPN_MemAlloc(uint32 size)
+void* NPN_MemAlloc(uint32_t size)
 {
   void * rv = NULL;
-  rv = CallNPN_MemAllocProc(NPNFuncs.memalloc, size);
+  rv = (*NPNFuncs.memalloc)(size);
   return rv;
 }
 
 void NPN_MemFree(void* ptr)
 {
-  CallNPN_MemFreeProc(NPNFuncs.memfree, ptr);
+  (*NPNFuncs.memfree)(ptr);
 }
 
-uint32 NPN_MemFlush(uint32 size)
+uint32_t NPN_MemFlush(uint32_t size)
 {
-  uint32 rv = CallNPN_MemFlushProc(NPNFuncs.memflush, size);
+  uint32_t rv = (*NPNFuncs.memflush)(size);
   return rv;
 }
 
 void NPN_ReloadPlugins(NPBool reloadPages)
 {
-  CallNPN_ReloadPluginsProc(NPNFuncs.reloadplugins, reloadPages);
+  (*NPNFuncs.reloadplugins)(reloadPages);
 }
 
 #ifdef OJI
 JRIEnv* NPN_GetJavaEnv(void)
 {
   JRIEnv * rv = NULL;
-	rv = CallNPN_GetJavaEnvProc(NPNFuncs.getJavaEnv);
+	rv = (*NPNFuncs.getJavaEnv)();
   return rv;
 }
 
 jref NPN_GetJavaPeer(NPP instance)
 {
   jref rv;
-  rv = CallNPN_GetJavaPeerProc(NPNFuncs.getJavaPeer, instance);
+  rv = (*NPNFuncs.getJavaPeer)(instance);
   return rv;
 }
 #endif
 
 NPError NPN_GetValue(NPP instance, NPNVariable variable, void *value)
 {
-  NPError rv = CallNPN_GetValueProc(NPNFuncs.getvalue, instance, variable, value);
+  NPError rv = (*NPNFuncs.getvalue)(instance, variable, value);
   return rv;
 }
 
 NPError NPN_SetValue(NPP instance, NPPVariable variable, void *value)
 {
-  NPError rv = CallNPN_SetValueProc(NPNFuncs.setvalue, instance, variable, value);
+  NPError rv = (*NPNFuncs.setvalue)(instance, variable, value);
   return rv;
 }
 
 void NPN_InvalidateRect(NPP instance, NPRect *invalidRect)
 {
-  CallNPN_InvalidateRectProc(NPNFuncs.invalidaterect, instance, invalidRect);
+  (*NPNFuncs.invalidaterect)(instance, invalidRect);
 }
 
 void NPN_InvalidateRegion(NPP instance, NPRegion invalidRegion)
 {
-  CallNPN_InvalidateRegionProc(NPNFuncs.invalidateregion, instance, invalidRegion);
+  (*NPNFuncs.invalidateregion)(instance, invalidRegion);
 }
 
 void NPN_ForceRedraw(NPP instance)
 {
-  CallNPN_ForceRedrawProc(NPNFuncs.forceredraw, instance);
+  (*NPNFuncs.forceredraw)(instance);
 }
--- gpac/configure.orig	2011-05-29 21:09:10.138301981 +0200
+++ gpac/configure	2011-05-29 21:27:39.248339117 +0200
@@ -1145,6 +1145,7 @@
 
 #look for GECKO support
 cat > $TMPCPP << EOF
+#include <mozilla-config.h>
 #include <nsIServiceManager.h>
 int main( void ) { return 0; }
 EOF
--- gpac/applications/osmozilla/osmozilla.cpp~	2012-01-22 17:15:26.902074831 +0100
+++ gpac/applications/osmozilla/osmozilla.cpp	2012-01-22 17:17:43.514543060 +0100
@@ -91,7 +91,7 @@
 	"application/x-gpac::GPAC plugin;" \
 
 
-char* NPP_GetMIMEDescription(void)
+const char* NPP_GetMIMEDescription(void)
 {
 	return GPAC_PLUGIN_MIMETYPES;
 }
--- gpac/applications/osmozilla/np_entry.cpp~	2005-07-13 16:34:30.000000000 +0200
+++ gpac/applications/osmozilla/np_entry.cpp	2012-01-22 17:43:44.464387379 +0100
@@ -172,7 +172,7 @@
   return NS_PluginInitialize();
 }
 
-char * NP_GetMIMEDescription(void)
+const char * NP_GetMIMEDescription(void)
 {
 	return NPP_GetMIMEDescription();
 }
